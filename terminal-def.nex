/(TUPLE|tuple)/         	{ lval.s = yylex.Text(); return TUPLE }
/(RELATION|relation)/           { lval.s = yylex.Text(); return RELATION }
/(PROJECT|project)/		{ lval.s = yylex.Text(); return PROJECTION }
/(WHERE|where)/                 { lval.s = yylex.Text(); return REDUCTION }
/(UNION|union)/                 { lval.s = yylex.Text(); return UNION }
/(INTERSECT|intersect)/         { lval.s = yylex.Text(); return INTERSECTION }
/(MINUS|minus)/                 { lval.s = yylex.Text(); return MINUS }
/(TIMES|times)/                 { lval.s = yylex.Text(); return TIMES }
/(JOIN|join)/	                { lval.s = yylex.Text(); return JOIN }
/(INTEGER|integer)/     	{ lval.s = yylex.Text(); return T_INTEGER }
/(RATIONAL|rational)/   	{ lval.s = yylex.Text(); return T_RATIONAL }
/(CHAR|char)/           	{ lval.s = yylex.Text(); return T_CHAR }
/(BOOLEAN|boolean)/     	{ lval.s = yylex.Text(); return T_BOOLEAN }
/[0-9]+/                	{ lval.s = yylex.Text(); return V_INTEGER }
/[0-9]+\.[0-9]+/        	{ lval.s = yylex.Text(); return V_RATIONAL }
/"[ a-zA-Z0-9]*"/		{ lval.s = yylex.Text(); return V_CHAR /* TODO: escape quotes, punctuation symbols */ }
/(TRUE|true|FALSE\false)/       { lval.s = yylex.Text(); return V_BOOLEAN }
/(=|<>|>|>=|<|<=)/		{ lval.s = yylex.Text(); return V_COMPARE}
/:=/       			{ lval.s = yylex.Text(); return ASSIGN }
/[a-zA-Z]+/                     { lval.s = yylex.Text(); return ID }
/[ \t]/                         { }
/./           			{ lval.s = yylex.Text(); return int(lval.s[0]) }
//

package main

import "fmt"

func (yylex Lexer) Error(e string) {
  fmt.Println(e)
}

